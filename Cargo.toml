[package]
name = "fac"
version = "0.1.0"
license = "Apache-2.0"
authors = ["Arnavion <me@arnavion.dev>"]
description = "A CLI tool to manage Factorio mods"
edition = "2021"


[dependencies]
anyhow = { version = "1", default-features = false, features = [
	"std", # for anyhow::Error::new(), anyhow::Error: From<impl std::error::Error>
] }
bytes = { version = "1", default-features = false }
clap = { version = "4", default-features = false, features = [
	"derive", # for #[derive(clap::Parser)]
	"help", # to auto-generate help text
	"std", # "`std` feature is currently required to build `clap`"
] }
crc32fast = { version = "1", default-features = false }
dirs = { version = "5", default-features = false }
futures-core = { version = "0.3", default-features = false }
futures-util = { version = "0.3", features = [
	"io",
] }
http = { version = "0.2", default-features = false }
itertools = { version = "0.11", default-features = false, features = [
	"use_alloc", # for itertools::join, itertools::Itertools::sorted_by, itertools::Itertools::try_collect
] }
libflate = { version = "2", default-features = false, features = [
	"std", # for libflate::deflate::Decoder: std::io::Read, via enabling "core2/std" which makes core2::io::Read == std::io::Read
] }
petgraph = { version = "0.6", default-features = false }
regex = { version = "1.2", default-features = false, features = [
	"std", # "`std` feature is currently required to build this crate"
] }
rpassword = { version = "7", default-features = false }
rprompt = { version = "1", default-features = false }
semver = { version = "1", default-features = false, features = [
	"std", # for semver::Error: std::error::Error
] }
serde = { version = "1", default-features = false, features = [
	"derive",
] }
serde_json = { version = "1", default-features = false, features = [
	"std", # for serde_json::from_reader, serde_json::to_writer_pretty
] }
textwrap = { version = "0.16", default-features = false, features = [
	"smawk", # for textwrap::WrapAlgorithm::OptimalFit
	"terminal_size", # for textwrap::Options::with_termwidth()
	"unicode-linebreak", # for textwrap::WordSeparator::UnicodeBreakProperties
] }
tokio = { version = "1", default-features = false, features = [
	"macros",
	"rt",
] }
uluru = { version = "3", default-features = false }

factorio-mods-common = { path = "./factorio-mods-common" }
factorio-mods-local = { path = "./factorio-mods-local" }
factorio-mods-web = { path = "./factorio-mods-web" }
package = { path = "./package" }


[lints]
workspace = true


[workspace]
resolver = "2"


[workspace.lints.rust]
rust_2018_idioms = "deny"
warnings = "deny"


[workspace.lints.clippy]
all = { level = "deny", priority = -1 }
pedantic = { level = "deny", priority = -1 }
default_trait_access = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"
module_name_repetitions = "allow"
must_use_candidate = "allow"
similar_names = "allow"
too_many_lines = "allow"
type_complexity = "allow"
